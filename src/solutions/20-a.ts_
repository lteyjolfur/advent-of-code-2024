import { readFileSync } from 'fs';

const input_real = readFileSync('./input.txt','utf-8');


const input = `###############
#...#...#.....#
#.#.#.#.#.###.#
#S#...#.#.#...#
#######.#.#.###
#######.#.#...#
#######.#.###.#
###..E#...#...#
###.#######.###
#...###...#...#
#.#####.#.###.#
#.#...#.#.#...#
#.#.#.#.#.#.###
#...#...#...###
###############`;

const  realModulo = (a:number, b:number) => {
	return ((a % b) + b) % b;
};

const sleep = (ms:number) => {
	const start = Date.now();
	while (Date.now() - start < ms) {
		// eslint-disable-next-line no-empty
	}
};

const dirs = [
	{x:0,y:-1}, 
	{x:1,y:0},
	{x:0,y:1},
	{x:-1,y:0},
];

const longDir = dirs.map(v=>({x:2*v.x,y:2*v.y}));

const dirSyms = [
	'^',
	'>',
	'v',
	'<'
];
//const dirStr = []



//type Dirs = typeof dirs;

const sum = (a:Vec,b:Vec) => ({y:a.y+b.y,x:a.x+b.x}); 
const posToStr = (a:Vec) => `${a.y},${a.x}`;

type Vec = {
	x:number,
	y:number
}

type Empty = {
	pos:Vec
	score:number
}




class Checker  {
	pos: Vec;
	dir: number;
	score: number;
	history: Empty[];

	constructor(pos:Vec,dir:number,score:number,history: Empty[]){
		this.pos = pos;
		this.dir = dir;
		this.score = score;
		this.history = [...JSON.parse(JSON.stringify(history)),{pos:this.pos,score:this.score}];
	}

	isViable(nC:Checker[],nextStep:Vec,dir:number):boolean{
		const newScore = this.score+1;
		const nextStr = posToStr(nextStep);
		if(posToStr(nextStep) === posToStr(end.pos) && end.score > newScore){
			end.score=newScore;
			console.log(this.history);
		}
		if(empties[nextStr]?.score>newScore){
			empties[nextStr].score = newScore;
			map[nextStep.y][nextStep.x] = dirSyms[dir];
			nC.push(new Checker(nextStep,dir,newScore,this.history));
			return true;
		}
		return false;
	}

	straight(nC:Checker[]){
		const nextStep = sum(this.pos,dirs[this.dir]);
		this.isViable(nC,nextStep,this.dir);
	}

	clockwise(nC:Checker[]){
		const dir = realModulo(this.dir+1,4);
		const nextStep = sum(this.pos,dirs[dir]);
		this.isViable(nC,nextStep,dir);
	}

	cClockwise(nC:Checker[]){
		const dir = realModulo(this.dir-1,4);
		const nextStep = sum(this.pos,dirs[dir]);
		this.isViable(nC,nextStep,dir);
	}

	back(nC:Checker[]){
		const dir = realModulo(this.dir+2,4);
		const nextStep = sum(this.pos,dirs[dir]);
		this.isViable(nC,nextStep,dir);
	}

	check(nC:Checker[]){
		this.straight(nC);
		this.clockwise(nC);
		this.cClockwise(nC);
		this.back(nC);
	}
}


let start:Vec = {y:0,x:0};
let end:Empty = {pos:{y:0,x:0},score:Infinity};
const walls:Record<string,Empty> ={};
const empties:{[key:string]:Empty}={};

const map = input.split('\n').map((row,y)=>row.split('').map((cell,x)=>{
	switch(cell) {
	case '.':
		empties[posToStr({y,x})]={pos:{y,x},score:Infinity};
		break;
	case 'S':
		start = {y,x};
		break;
	case 'E':
		end = {pos:{y,x},score:Infinity};
		break;
	default:
		walls[posToStr({y,x})]={pos:{y,x},score:Infinity};
	} 
	return cell;
	
}));
//console.log(bytes);
//console.log(empties);

const render = () => {
	//const cMap = [...map];
	
	console.clear();
	console.log(map.map(row=>row.join('')).join('\n'));
};
render();

// const checkBytes = (pos:Vec) => {


// };

let checks:Checker[] = [new Checker(start,1,0,[])];
const firstPass = () => {
	while(end.score === Infinity){

		const newChecks:Checker[] = [];
		//isFull = !Object.values(empties).some(e=>e.score === Infinity);
		checks.forEach(checker=>checker.check(newChecks));
		checks = [...newChecks];
		//render();
		//sleep(10);
	}
};

firstPass();

render();
console.log(end.score);

console.log(empties);

//const cheats:Record<string,number> = {};
let cheats = 0;

empties[posToStr(end.pos)] = end;
empties[posToStr(end.pos)] = {pos:start,score:0};

const threshold = 50;

Object.values(empties).forEach(empty=>{
	const {x,y}=empty.pos;
	for(let i = y-20; i<y+20; i++){
		for(let j = x-20; j<x+20; j++){
			//if (i<0 || j<0 || i>=map.length || j>=map[0].length){
			//	continue;
			//}
			if(Math.abs(i-y) + Math.abs(j-x) > 20){
				continue;
			}
			
			const lookPos = {y:i,x:j};
			const lookString = posToStr(lookPos);

			if(save > 0){
				console.log(empties[lookString],empty);
				console.log(save);
				//cheats[save]??=0;
				//cheats[save]++;
				++cheats;
			}
		}
	}
	longDir.forEach(dir=>{
		const lookPos = sum(dir,empty.pos);
		const lookString = posToStr(lookPos);
		//console.log(empties[lookString]?.score||0,empty.score,empties[lookString]?.score||0-empty.score-2 );
		const save = empties[lookString]?.score - (empty.score + 2 + 99); 
		if(save > 0){
			console.log(empties[lookString],empty);
			console.log(save);
			//cheats[save]??=0;
			//cheats[save]++;
			++cheats;
		}
	});
});

console.log(cheats);
// 6824 high
// 1436 low