const input= `............s...............1.....................
......................E......3.....S..............
.......................3.....S....................
...e........T.t.......S.1...........I.............
..................B..................I.....O......
g.......z........i39......B..I....................
.......s....S.......3......................i..I...
....e.............2..........B....................
.......tC...z.......g......1......................
.E......s....R....................................
..G...t..........2................................
.........K...C.......2............................
....T..e...........5...C..........................
...T................................O...o.........
...............................g..............o...
.........z...................g......i............o
...9.E............H...........Y.......O...........
..........R..H...............7.O..................
...........H.............v......7........B........
..9.Q.......................W......1........Y.....
.........................z.7.................Y....
.....Q................................v...........
....K.......E.....R...............2..........o....
.n............H......v...........................Y
.G.y..........................Q...................
......G....A5.....................h...............
..........D...5.w...9.............................
......n....5...L..................................
............................v.....................
............L...0t..........7.....................
..n....k............y....................W........
..k..........0.........................W..........
...n.......R..L..a........................W.......
.........................................h........
..0..L........c...b...............................
.....................8.y..........................
.......w.................6.............h.......N..
..........y..4....................................
...0....8...k.....Z........r......................
..............a...8Z.........G......4.............
........4..b.q.....................K..............
.q...........kZ.K......b..D.........d.............
.8.....................D................r.........
.....w.........a...............d........A.........
................................d.A.hV............
................c..........D.....V....r...........
.......Z......6.....l........................A.d..
...................l..6..c....b......r...........N
......a....4........q..l..V..c................N...
l.....w...........q..6............V...............`;

const input1 = `............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............`;

/* Antinodes
{}

*/

type Coord= {
	x:number,
	y:number
}

const inputRows = input.split('\n').length;
const inputCols = input.split('\n')[0].split('').length;

//const findDistance = (p1,p2) => (p1,p2);
const findAntinode = (c1:Coord,c2:Coord) => ({x:c2.x-c1.x+c2.x, y: c2.y-c1.y+c2.y});
const findAllAntinodes = (c1:Coord,c2:Coord) => {
	const dx = c2.x-c1.x; 
	const dy = c2.y-c1.y;
	const allAntinodes = [c1,c2];
	let i  = 0;
	while(boundryCheck({x:c2.x+dx*i,y:c2.y+dy*i})){
		allAntinodes.push({x:c2.x+dx*i,y:c2.y+dy*i});
		++i;
	}
	return allAntinodes;
};
const toString = ({x,y}:Coord)=>`${x},${y}`;
// const findHarmonics = (c1:Coord,c2:Coord) => {
// 	const {x:dx,d:dy} = findAntinode(c1,c2);
// 	if(c1.x === c2.x){
// 		return Array.from({length:inputCols},(_,i)=>({x:i,y:c1.y}));
// 	} else if (c1.y === c2.y) {
// 		return Array.from({length:inputCols},(_,i)=>({x:c1.x,y:i}));
// 	} else if (Math.abs(dx)-Math.abs(dy) === 0) {

// 	}

// 	else return [];
// };	




//console.log('inputCols',inputCols);
//console.log('inputRows',inputRows);


const antennas : {[key:string]:Coord[]} = {};

const boundryCheck = ({x,y}:Coord) => (x> -1&& x<inputCols&& y> -1 && y<inputRows);


input.split('\n').forEach((row,y)=>row.split('').forEach((n,x) => {
	if(n === '.'){
		return;
	}
	if (!(n in antennas)){
		antennas[n] = [];
	}
	antennas[n].push({x,y});
	
}));


const antiNodeSet = new Set();

const antinodes = Object.keys(antennas).forEach(key=>antennas[key].forEach((coord,index)=>{
	const row=antennas[key];
	if(index === row.length-1){
		return [];
	}
	return row.slice(index+1).map(check=>{
		return [...findAllAntinodes(coord,check),...findAllAntinodes(check,coord)]
			.filter(node=>(boundryCheck(node))).forEach((valid=>antiNodeSet.add(toString(valid))));
	});
	//filt;
}));

//console.log(antennas);
//console.log(antinodes);
//console.log('---');
//const flatAntinodes = antinodes.flatMap(x=>x.flatMap(y=>y.flatMap(z=>z))); 
//console.log(flatAntinodes.length);
//console.debug(flatAntinodes);
//const antiNodeSet = new Set(flatAntinodes.map(({x,y})=>`${x},${y}`));
console.log(antiNodeSet.size); // 22100 too high
console.log(Object.keys(antennas));
