import { readFileSync,writeFileSync } from 'fs';

const input_r = readFileSync('./input.txt','utf-8');

const input = `ka-co
ta-co
de-co
ta-ka
de-ta
ka-de`;

const input_a = `kh-tc
qp-kh
de-cg
ka-co
yn-aq
qp-ub
cg-tb
vc-aq
tb-ka
wh-tc
yn-cg
kh-ub
ta-co
de-co
tc-td
tb-wq
wh-td
ta-ka
td-qp
aq-cg
wq-ub
ub-vc
de-ta
wq-aq
wq-vc
wh-yn
ka-de
kh-ta
co-tc
wh-qp
tb-vc
td-yn`;

//const pairs:Set<Set<string>> = new Set();
const pairs:string[][] = [];
const triplet:string[][] = [];

input.split('\n').forEach(row=>{
	pairs.push(row.split('-'));
});

pairs.forEach((pair,i)=>{
	console.log('----');
	const rest = pairs.slice(i);
	console.log(pair.join('-'));
	const hits =  pair.map((computer)=>rest.filter(c=>c.includes(computer)).map(c=>c.filter(p=>p!==computer)).flat());
	if(hits.some(c=>c.length===0)){
		return;
	}
	console.log(hits);
	const confirmed = hits[0].filter(c=>hits.slice(1).every((hit)=> hit.includes(c)));
	//h;
	//console.log(confirmed);
	confirmed.forEach(c=>{
		triplet.push([...pair,c]);	
	});
});




console.log(triplet);
console.log(triplet.length);

const problem1 = (triplet:string[][]) => {
	const result = triplet.filter((t)=>t.some(s=>s.startsWith('t')));
	console.log(result);
	console.log(result.length);
};


console.log([1,2,3].slice(1));

//const quad:string[][] = [];
const quad:Set<string> = new Set();
triplet.forEach((pair,i)=>{
	console.log('----');
	const rest = pairs.slice(i);
	console.log(pair.join('-'));
	const hits =  pair.map((computer)=>rest.filter(c=>c.includes(computer)).map(c=>c.filter(p=>p!==computer)).flat());
	if(hits.some(c=>c.length===0)){
		return;
	}
	console.log(hits);
	const confirmed = hits[0].filter(c=>hits.slice(1).every((hit)=> hit.includes(c)));
	//h;
	//console.log(confirmed);
	confirmed.forEach(c=>{
		quad.add(JSON.stringify([...pair,c].sort()));	
	});
});

console.log(quad);
console.log(quad.size);