//const input = readFileSync('./input.txt','utf-8');

import memoize from 'memoizee';

const input_b = `029A
980A
179A
456A
379A`;

const input = `593A
283A
670A
459A
279A`;

const KEYPADS = 26; //26;
const DEPTH  = KEYPADS;
//const DEPTH = 26;

const numericCodes:number[] = [];
const codes = input.split('\n').map(row=>{
	numericCodes.push(Number(row.split('A')[0]));
	return row.split('');
});

const keyPad = [
	['7','8','9'],
	['4','5','6'],
	['1','2','3'],
	['E','0','A']
];

const dirPad = [
	['E','^','A'],
	['<','v','>'],
];

type Dir = ('v'|'^'|'>'|'<')

type Vec = {
	x:number,
	y:number
}

const sum = (a:Vec,b:Vec) => ({y:a.y+b.y,x:a.x+b.x}); 
const sub = (a:Vec,b:Vec) => ({y:a.y-b.y,x:a.x-b.x});

const keyMap:Record<string,Vec> = {};
const padMap:Record<string,Vec> = {};

keyPad.forEach((row,y)=>row.forEach((n,x)=>{
	keyMap[n] = {y,x};
}));

dirPad.forEach((row,y)=>row.forEach((n,x)=>{
	padMap[n] = {y,x};
}));



const directions = [
	'v',
	'<',
	'>',
	'^',
];

const dirToPos = {
	v: {x:0,y:1},
	'<': {x:-1,y:0},
	'>': {x:1,y:0},
	'^': {x:0,y:-1},
};

const vDir = ['^','v'];
const hDir = ['<','>'];

const total = 0;

const makeDir = (n:number,dir:string[]) => Array(Math.abs(n)).fill(dir[n<0?0:1]);

const removeInvalidPaths = (paths:any[][],prevPos:Vec,pad:string[][]) => {
	return paths.filter(path => {
		let tempPos = {...prevPos};
		const realPath = path.map((dir:Dir)=>{
			const nextMove = dirToPos[dir];
			const nextPos = sum(nextMove,tempPos);
			tempPos = nextPos;
			return pad[nextPos.y][nextPos.x];
		});
		return !realPath.includes('E');
	});
};

const selectPaths = (x:number,y:number,isFirst:boolean) => {
	const vFirst = [[...makeDir(y,vDir),...makeDir(x,hDir)],[...makeDir(x,hDir),...makeDir(y,vDir)]];
	const hFirst = [[...makeDir(x,hDir),...makeDir(y,vDir)],[...makeDir(y,vDir),...makeDir(x,hDir)]]; 
	
	switch (true){
	case x<0: 
		return hFirst;
	case x>0:
		return vFirst;
	default:
		//X
		return hFirst;
	}

	/*
	a b c d
		0 0 0 0 175396398527088
		0 0 0 1 175396398527088
		0 0 1 0 182840045050160
		0 0 1 1 154115708116294
		0 1 0 0
		0 1 0 1
		0 1 1 0
		0 1 1 1
		1 0 0 0
		1 0 0 1
		1 0 1 0
		1 0 1 1
		1 1 0 0
		1 1 0 1
		1 1 1 0
		1 1 1 1
	*/
	

	// if(!isFirst){
	// 	switch (true){
	// 	case x<0:
	// 		return hFirst;
	// 	case y<0:
	// 		return vFirst;
	// 	case y>0:
	// 		return vFirst;
	// 	default:
	// 		return hFirst;
	// 	}
	// } else {
	// 	switch (true){
	// 	case x>0:
	// 		return hFirst;
	// 	case y<0:
	// 		return vFirst;
	// 	case x<0:
	// 		return hFirst;
	// 	default:
	// 		return hFirst;
	// 	}
	// } 
};

const pathExplorer:string[][] = [[],[],[]]; 

const pathfindDef = (cur:string,prev:string, isFirst:boolean,depth:number) => {
	if (depth ===DEPTH ){//>= KEYPADS){
		return 0;
	}
	const map = isFirst? keyMap:padMap;
	const pad = isFirst? keyPad:dirPad;
	const prevPos = map[prev];
	const curPos = map[cur];

	const {x,y}= sub(curPos,prevPos);
	
	let paths = selectPaths(x,y,isFirst);
	paths = paths.filter(path => {
		let nextPos = {...prevPos};
		const realPath = path.map((dir:Dir)=>{
			const nextMove = dirToPos[dir];
			nextPos = sum(nextMove,nextPos);
			
			return pad[nextPos.y][nextPos.x];
		});
		return !realPath.includes('E');
	});	
	
	paths[0].push('A');
	const usedPath = [...paths[0] as string[]];
	//pathExplorer[depth].push(...usedPath);
	//console.log(usedPath);
	const nextScore = numNum(usedPath,depth+1);
	if(DEPTH-1 === depth){
		return paths[0].length+nextScore; 
	}
	return nextScore;
	//+ usedPath.map(numNum(usedPath,recCount+1)).reduce((acc,cur)=>acc+cur); // to add 'A';
};

const pathfind = memoize(pathfindDef, {
	normalizer: args => {
		const [cur,prev,isFirst,depth] = args;
		return `${cur}-${prev}-${isFirst}-${depth}`;
	}
});
//const pathfind = pathfindDef;

const numNum = (codeInput:string[],depth=0) => {
	const isFirst = depth === 0;
	let score = 0;
	//console.log('----');
		
	//console.log(codeInput.join(''));
	let prev = 'A';
	codeInput.forEach((cur)=>{
		const nextScore = pathfind(cur,prev,isFirst,depth);
		prev = cur;
		score += nextScore;
		//paths[depth].push(...path);

	});
	return score;
};


let totalScore = 0;
codes.forEach((code,i)=>{
	console.log('index: ',i);
	
	const score = numNum(code);
	totalScore += score*numericCodes[i];
	console.log('-------');
	console.log(code);
	//pathExplorer.forEach(path => console.log(path.join('')));
	//pathExplorer = Array.from({length:KEYPADS},()=>[]);
	
	console.log('score:',score);
	//console.log(padInput1);
	// console.log(padInput.join(''));
	// console.log('length', padInput.length);
	// console.log(numericCodes[i]*padInput.length);
	// console.log(`${padInput.length} * ${numericCodes[i]}`);
	// total += numericCodes[i]*padInput.length;
});
console.log(totalScore);
console.log('total:', total);


// forward solver

//<A>A<AAv<AA>>^AvAA^Av<AAA>^A

//<v<A>>^AvA^Av<'<'A>>^AAv<A<A>>^AAvAA<^A>Av<A>^AA<A>Av<A<A>>^AAAvA<^A>A
//<v<A>>^AvA^A<v   A<AA>>^AAvA<^A>AAvA^A<   vA>^AA<A>A<v<A>A>^AAAvA<^A>A
//const command = 'v<<A>>^A<A>AvA<^AA>A<vAAA>^A'.split('');
//executeRobotCommands();

// const nextMove = dirToPos[dir];
// const nextPos = sum(nextMove,tempPos);
// tempPos = nextPos;
// const pad = isFirst? keyPad:dirPad;
// return pad[nextPos.y][nextPos.x];

// part 1
//163872 high
//166244 low

// part 2
// 91,158,571,398,634 low 25
// 121,527,163,247,592 ??? 25
// 230,904,909,907,784 high 26 testcode
// 307,828,634,963,754 high 26 correct?
// largest
// 9,007,199,254,740,991

// part 2 test
// testHigh reddit
// 246,822,631,766,548
// testHigh E
// 230,904,909,907,784
// test correct
// 154,115,708,116,294



























const move = (codeInput:string[],position:number,start='A'):string[] => {
	const isFirst = position === 0;
	const map = isFirst? keyMap:padMap;
	const pad = isFirst? keyPad:dirPad;

	const isVertFirst = ['v','^'].includes(codeInput[0]);

	const next:string[] = [];
	//console.log('----');
		
	//console.log(codeInput.join(''));

	codeInput.forEach((cur,i,caller)=>{
		
		const prev = caller[i-1] ?? start;
		const prevPos = map[prev];
		const curPos = map[cur];
		if(curPos === undefined || prevPos === undefined){
			console.log('oh oh');
		}
		const {x,y}= sub(curPos,prevPos);
		let paths:string[][];

		if(isVertFirst){
			paths = [[...makeDir(y,vDir),...makeDir(x,hDir)],[...makeDir(x,hDir),...makeDir(y,vDir)]];
		} else {
			paths = [[...makeDir(x,hDir),...makeDir(y,vDir)],[...makeDir(y,vDir),...makeDir(x,hDir)]];
		}
		//paths = removeInvalidPaths(paths,prevPos,pad);
		
		next.push(...paths[0],'A');
	});
	
	//console.log(next);
	return next;
};





const padActuation = () => {

	const testParams = [{
		name:'upleft',
		padInput: ['^','<'],
		start: '>'
	},{
		name:'leftup',
		padInput: ['<','^'],
		start: '>'
	},{	
		name:'downright',
		padInput: ['v','>'],
		start: 'A'
	},{
		name:'rightdown',
		padInput: ['>', 'v'],
		start: 'A'
	},{
		name:'rightup',
		padInput: ['>','^'],
		start: 'v'
	},{
		name:'upright',
		padInput: ['^','>'],
		start: 'v'
	},{
		name:'leftdown',
		padInput: ['<','v'],
		start: '^'
	},{
		name:'downleft',
		padInput: ['v','<'],
		start: '^'
	}
	];

	testParams.forEach(({name,padInput,start})=>{
		console.log('---');
		console.log(name);
		for (let i = 2; i<10; i++){
			padInput = move(padInput,i,start);
		}
		console.log(padInput.length);	
	});
	
};

padActuation();

function executeRobotCommands() {
	const command = '<vA<AA>>^AvAA<^A>Av<<A>>^AvA^Av<<A>>^AAvA<A^>A<A>Av<<A>A^>AAA<A>vA^A'.split('');

	const robotAction = (command: string[]) => {
		let pos = padMap['A'];

		const result: string[] = [];
		command.forEach((step) => {
			if (step === 'A') {
				result.push(dirPad[pos.y][pos.x]);
				return;
			}
			pos = sum(dirToPos[step as Dir], pos);
		});

		return result;
	};

	console.log('step 0');
	console.log(command);
	console.log(command.join(''));
	const result0 = robotAction(command);
	console.log('step 1');
	console.log(result0);
	console.log(result0.join(''));
	const result1 = robotAction(result0);
	console.log('final step');
	console.log(result1);
	console.log(result1.join(''));


	let pos = keyMap['A'];
	const result3: string[] = [];
	result1.forEach((step) => {
		if (step === 'A') {
			result3.push(keyPad[pos.y][pos.x]);
			return;
		}
		pos = sum(dirToPos[step as Dir], pos);
	});

	console.log(result3);
}
// prio list
/*
leftup 99 upleft 135
rightdown 90 downright 91
upright 65 rightup 71
leftdown76 downleft 77


*/	