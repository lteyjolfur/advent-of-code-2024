import { readFileSync } from 'fs';

const input_r = readFileSync('./input.txt','utf-8');


// eslint-disable-next-line @typescript-eslint/no-unused-vars
const input_b = `x00: 1
x01: 1
x02: 1
y00: 0
y01: 1
y02: 0

x00 AND y00 -> z00
x01 XOR y01 -> z01
x02 OR y02 -> z02`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const input = `x00: 1
x01: 0
x02: 1
x03: 1
x04: 0
y00: 1
y01: 1
y02: 1
y03: 1
y04: 1

ntg XOR fgs -> mjb
y02 OR x01 -> tnw
kwq OR kpj -> z05
x00 OR x03 -> fst
tgd XOR rvg -> z01
vdt OR tnw -> bfw
bfw AND frj -> z10
ffh OR nrd -> bqk
y00 AND y03 -> djm
y03 OR y00 -> psh
bqk OR frj -> z08
tnw OR fst -> frj
gnj AND tgd -> z11
bfw XOR mjb -> z00
x03 OR x00 -> vdt
gnj AND wpb -> z02
x04 AND y00 -> kjc
djm OR pbm -> qhw
nrd AND vdt -> hwm
kjc AND fst -> rvg
y04 OR y02 -> fgs
y01 AND x02 -> pbm
ntg OR kjc -> kwq
psh XOR fgs -> tgd
qhw XOR tgd -> z09
pbm OR djm -> kpj
x03 XOR y03 -> ffh
x00 XOR y04 -> ntg
bfw OR bqk -> z06
nrd XOR fgs -> wpb
frj XOR qhw -> z04
bqk OR frj -> z07
y03 OR x01 -> nrd
hwm AND bqk -> z03
tgd XOR rvg -> z12
tnw OR pbm -> gnj`;

type GateType = ('AND'|'OR'|'XOR') 

type Gate = {
	x: string,
	y: string,
	o: string,
	gate: GateType
}

type GateFunc = (w0: boolean,w1:boolean) => boolean

const [wiresRaw,connectionsRaw] = input.split('\n\n');

const wires:Record<string,boolean|undefined> = {};
const zWires:Record<string,boolean> = {};
const outputs:Record<string,boolean> = {};
const gates:Record<string,GateFunc> = {
	AND: (w0,w1)=>w0&&w1,
	OR: (w0,w1)=>w0||w1,
	XOR: (w0,w1)=>w0!==w1
};
let connections:Gate[] = [];
const getNKeys = (n:string)=>Object.keys(wires).filter(k=>k.startsWith(n.toLowerCase())).sort((a,b)=>Number(a.substring(1))-Number(b.substring(1)));
const getNVals = (n:string)=>getNKeys(n).map(k=>wires[k]);
const getZKeys = ()=>getNKeys('z');
const getZVals = ()=>getNVals('z');
const toBin_wrong = (bools:(boolean|undefined)[]) => {
	if (bools.some(b=>b===undefined)){
		throw 'undefined output';
	}
	return bools.map((b,i)=>(Number(b)<<i)).reduce((acc,cur)=>acc+cur);
};

const toBin = (bools:(boolean|undefined)[]) => {
	if(bools.some(b=>b===undefined)){
		throw 'undefined in toBin';
	}
	const bString = bools.slice().reverse().map(b=>Number(b).toString()).join('');
	return parseInt(bString,2);
};


wiresRaw.split('\n').forEach(row=> {
	const [key,val] = row.split(': ');
	wires[key] = Boolean(Number(val));
});

console.log(wires);

connectionsRaw.split('\n').forEach(row=>{
	// eslint-disable-next-line @typescript-eslint/no-unused-vars
	const [x,gate,y,_,o] = row.split(' ');
	wires[o] = undefined;
	connections.push({
		x,
		y,
		gate: gate as GateType,
		o
	});
});

console.log(connections);

let passes = 0;
//while (getZVals().some(v=>v===undefined))  {
while (connections.some(({o})=>wires[o]===undefined))  {
	console.log('pass:',passes, connections,'connections');
	connections = connections.filter(connection=>{
		const {x, gate,y,o} = connection;
		const xVal = wires[x];
		const yVal = wires[y];
		const oVal = wires[o];
		if(oVal !== undefined){
			throw 'double assignment';
		}
		if (xVal === undefined || yVal === undefined){
			return true;
		}
		wires[o] = gates[gate](xVal,yVal);
		return false;
	});
	++passes;
}


Object.keys(wires).forEach(k=> {
	if(k.startsWith('z')){
		console.log(k,wires[k]);
	}
}) ;

console.log(getZKeys());
console.log(getZVals());
// correct answer here
console.log(parseInt(getZVals().reverse().map(b=>Number(b).toString()).join(''),2));

console.log(toBin(getZVals()));


// low 1453455361