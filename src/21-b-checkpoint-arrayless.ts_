//const input = readFileSync('./input.txt','utf-8');

import memoize from 'memoizee';

const input_b = `029A
980A
179A
456A
379A`;

const input = `593A
283A
670A
459A
279A`;

const KEYPADS = 3;

const numericCodes:number[] = [];
const codes = input.split('\n').map(row=>{
	numericCodes.push(Number(row.split('A')[0]));
	return row.split('');
});

const keyPad = [
	['7','8','9'],
	['4','5','6'],
	['1','2','3'],
	['E','0','A']
];

const dirPad = [
	['E','^','A'],
	['<','v','>'],
];

type Dir = ('v'|'^'|'>'|'<')

type Vec = {
	x:number,
	y:number
}

const sum = (a:Vec,b:Vec) => ({y:a.y+b.y,x:a.x+b.x}); 
const sub = (a:Vec,b:Vec) => ({y:a.y-b.y,x:a.x-b.x});

const keyMap:Record<string,Vec> = {};
const padMap:Record<string,Vec> = {};

keyPad.forEach((row,y)=>row.forEach((n,x)=>{
	keyMap[n] = {y,x};
}));

dirPad.forEach((row,y)=>row.forEach((n,x)=>{
	padMap[n] = {y,x};
}));



const directions = [
	'v',
	'<',
	'>',
	'^',
];

const dirToPos = {
	v: {x:0,y:1},
	'<': {x:-1,y:0},
	'>': {x:1,y:0},
	'^': {x:0,y:-1},
};

const vDir = ['^','v'];
const hDir = ['<','>'];

let total = 0;

const makeDir = (n:number,dir:string[]) => Array(Math.abs(n)).fill(dir[n<0?0:1]);

const removeInvalidPaths = (paths:any[][],prevPos:Vec,pad:string[][]) => {
	return paths.filter(path => {
		let tempPos = {...prevPos};
		const realPath = path.map((dir:Dir)=>{
			const nextMove = dirToPos[dir];
			const nextPos = sum(nextMove,tempPos);
			tempPos = nextPos;
			return pad[nextPos.y][nextPos.x];
		});
		return !realPath.includes('E');
	});
};

const selectPaths = (x:number,y:number) => {
	const vFirst = [[...makeDir(y,vDir),...makeDir(x,hDir)],[...makeDir(x,hDir),...makeDir(y,vDir)]];
	const hFirst = [[...makeDir(x,hDir),...makeDir(y,vDir)],[...makeDir(y,vDir),...makeDir(x,hDir)]]; 
	
	switch (true){
	case x<0:
		return hFirst;
	case y<0:
		return vFirst;
	case y>0:
		return vFirst;
	default:
		return hFirst;
	}
};

const pathfindDef = (cur:string,prev:string, isFirst:boolean):string[] => {
	const map = isFirst? keyMap:padMap;
	const pad = isFirst? keyPad:dirPad;
	const prevPos = map[prev];
	const curPos = map[cur];

	const {x,y}= sub(curPos,prevPos);
	
	let paths = selectPaths(x,y);
	paths = paths.filter(path => {
		let tempPos = {...prevPos};
		const realPath = path.map((dir:Dir)=>{
			const nextMove = dirToPos[dir];
			const nextPos = sum(nextMove,tempPos);
			tempPos = nextPos;
			return pad[nextPos.y][nextPos.x];
		});
		return !realPath.includes('E');
	});		
	return paths[0] as string[];
};

const pathfind = memoize(pathfindDef);

const numNum = (codeInput:string[],position:number):string[] => {
	const isFirst = position === 0;


	const next:string[] = [];
	//console.log('----');
		
	//console.log(codeInput.join(''));
	let prev = 'A';
	codeInput.forEach((cur)=>{
		
		const path = pathfind(cur,prev,isFirst);
		prev = cur;
		next.push(...path,'A');
	});
	return next;
};



//
// [
// 	'^^^<<'.split(''),
// 	'^<<^^'.split(''),
// ].forEach((code,i)=>{
codes.forEach((code,i)=>{
	console.log('index: ',i);
	const codeInput:string[] = [];
	//const padInput:string[] = [];

	// code.forEach((cur,i)=>{
	// 	const prev = code[i-1] ?? 'A';
	// 	const prevPos = keyMap[prev];
	// 	const curPos = keyMap[cur];
	// 	const move = sub(curPos,prevPos);
	// 	const absX = Math.abs(move.x);
	// 	const absY = Math.abs(move.y);
	// 	//console.log(move);
	// 	if(move.y<0){
	// 		codeInput.push(...Array(absY).fill('^'),...Array(absX).fill(move.x>0?'>':'<'));
	// 	} else {
	// 		codeInput.push(...Array(absX).fill(move.x>0?'>':'<'),...Array(absY).fill('v'));
	// 	}
	// 	codeInput.push('A');

	// });

	// console.log(codeInput);

	
	let padInput = code;

	for (let i = 0; i<KEYPADS; i++){ // TODO: CHANGE TO 0
		padInput = numNum(padInput,i);
		console.log(padInput.join(''));
	}

	
	

	//console.log(padInput1);
	console.log(padInput.join(''));
	console.log('length', padInput.length);
	console.log(numericCodes[i]*padInput.length);
	console.log(`${padInput.length} * ${numericCodes[i]}`);
	total += numericCodes[i]*padInput.length;
});

console.log('total:', total);


// forward solver?

//<A>A<AAv<AA>>^AvAA^Av<AAA>^A

//<v<A>>^AvA^Av<'<'A>>^AAv<A<A>>^AAvAA<^A>Av<A>^AA<A>Av<A<A>>^AAAvA<^A>A
//<v<A>>^AvA^A<v   A<AA>>^AAvA<^A>AAvA^A<   vA>^AA<A>A<v<A>A>^AAAvA<^A>A
//const command = 'v<<A>>^A<A>AvA<^AA>A<vAAA>^A'.split('');
//executeRobotCommands();

// const nextMove = dirToPos[dir];
// const nextPos = sum(nextMove,tempPos);
// tempPos = nextPos;
// const pad = isFirst? keyPad:dirPad;
// return pad[nextPos.y][nextPos.x];


//163872 high
//166244 low
const move = (codeInput:string[],position:number,start='A',end=KEYPADS):string[] => {
	const isFirst = position === 0;
	const map = isFirst? keyMap:padMap;
	const pad = isFirst? keyPad:dirPad;

	const isVertFirst = ['v','^'].includes(codeInput[0]);

	const next:string[] = [];
	//console.log('----');
		
	//console.log(codeInput.join(''));

	codeInput.forEach((cur,i,caller)=>{
		
		const prev = caller[i-1] ?? start;
		const prevPos = map[prev];
		const curPos = map[cur];
		if(curPos === undefined || prevPos === undefined){
			console.log('oh oh');
		}
		const {x,y}= sub(curPos,prevPos);
		let paths:string[][];

		if(isVertFirst){
			paths = [[...makeDir(y,vDir),...makeDir(x,hDir)],[...makeDir(x,hDir),...makeDir(y,vDir)]];
		} else {
			paths = [[...makeDir(x,hDir),...makeDir(y,vDir)],[...makeDir(y,vDir),...makeDir(x,hDir)]];
		}
		//paths = removeInvalidPaths(paths,prevPos,pad);
		
		next.push(...paths[0],'A');
	});
	
	//console.log(next);
	return next;
};





const padActuation = () => {

	const testParams = [{
		name:'upleft',
		padInput: ['^','<'],
		start: '>'
	},{
		name:'leftup',
		padInput: ['<','^'],
		start: 'A'
	},{	
		name:'downright',
		padInput: ['v','>'],
		start: 'A'
	},{
		name:'rightdown',
		padInput: ['>', 'v'],
		start: 'A'
	},{
		name:'rightup',
		padInput: ['>','^'],
		start: 'v'
	},{
		name:'upright',
		padInput: ['^','>'],
		start: 'v'
	},{
		name:'leftdown',
		padInput: ['<','v'],
		start: '^'
	},{
		name:'downleft',
		padInput: ['v','<'],
		start: '^'
	}
	];

	testParams.forEach(({name,padInput,start})=>{
		console.log('---');
		console.log(name);
		for (let i = 1; i<5; i++){
			padInput = move(padInput,i,start);
		}
		console.log(padInput.length);	
	});
	
};


function executeRobotCommands() {
	const command = '<vA<AA>>^AvAA<^A>Av<<A>>^AvA^Av<<A>>^AAvA<A^>A<A>Av<<A>A^>AAA<A>vA^A'.split('');

	const robotAction = (command: string[]) => {
		let pos = padMap['A'];

		const result: string[] = [];
		command.forEach((step) => {
			if (step === 'A') {
				result.push(dirPad[pos.y][pos.x]);
				return;
			}
			pos = sum(dirToPos[step as Dir], pos);
		});

		return result;
	};

	console.log('step 0');
	console.log(command);
	console.log(command.join(''));
	const result0 = robotAction(command);
	console.log('step 1');
	console.log(result0);
	console.log(result0.join(''));
	const result1 = robotAction(result0);
	console.log('final step');
	console.log(result1);
	console.log(result1.join(''));


	let pos = keyMap['A'];
	const result3: string[] = [];
	result1.forEach((step) => {
		if (step === 'A') {
			result3.push(keyPad[pos.y][pos.x]);
			return;
		}
		pos = sum(dirToPos[step as Dir], pos);
	});

	console.log(result3);
}
// prio list
/*
leftup 99 upleft 135
rightdown 90 downright 91
upright 65 rightup 71
leftdown76 downleft 77


*/	